name: Extract solution

on:
  workflow_dispatch:
    inputs:
      solution_name:
        description: 'CRM solution to export'
        required: true
        default: DQT20
      pr_title:
        description: 'The title of the created pull request'
        required: true

env:
  EXPORTED_SOLUTION_ZIP: out/exported/${{ github.event.inputs.solution_name }}.zip
  SOLUTION_PATH: solutions/${{ github.event.inputs.solution_name }}

jobs:
  export:
    name: Export solution
    runs-on: ubuntu-latest
    concurrency: extract-solution

    steps:
    - run: git config --global core.longpaths true

    - uses: actions/checkout@v2

    - uses: Azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS_DEV }}

    - uses: DfE-Digital/keyvault-yaml-secret@v1.0.1
      id: CRM
      with:
        keyvault: ${{ secrets.KEY_VAULT_DEV }}
        secret: CRM
        key: CRM_URL, CRM_APP_ID, CRM_APP_SECRET, CRM_TENANT_ID

    - name: Read existing solution version
      id: existing-version
      shell: pwsh
      run: |
        [xml]$solution = Get-Content (Join-Path $env:SOLUTION_PATH Other Solution.xml)
        $version = $solution.ImportExportXml.SolutionManifest.Version
        Write-Output "::set-output name=number::$version"

    - run: |
        # Install PAC CLI
        wget https://www.nuget.org/api/v2/package/Microsoft.PowerApps.CLI.Core.linux-x64 -P ~ \
        && unzip ~/Microsoft.PowerApps.CLI.Core.linux-x64 -d ~/pac \
        && chmod +x ~/pac/tools/pac \
        && export PATH=~/pac/tools:$PATH

        # Authenticate
        pac auth create --name build \
        --url ${{ steps.CRM.outputs.CRM_URL }} \
        -id ${{ steps.CRM.outputs.CRM_APP_ID }} \
        -cs ${{ steps.CRM.outputs.CRM_APP_SECRET }} \
        -t ${{ steps.CRM.outputs.CRM_TENANT_ID }}

        # Export solution
        pac solution export --path solution.zip --name ${{ github.event.inputs.solution_name }} --managed

        # Unpack solution
        rm -rf ${{ env.SOLUTION_PATH }}/*
        pac solution unpack --zipfile solution.zip --packagetype managed --folder ${{ env.SOLUTION_PATH }}

    - name: Read new solution version
      id: new-version
      shell: pwsh
      run: |
        [xml]$solution = Get-Content (Join-Path $env:SOLUTION_PATH Other Solution.xml)
        $version = $solution.ImportExportXml.SolutionManifest.Version
        Write-Output "::set-output name=number::$version"

        # Check that the extracted version is greater than the current version
        if ([System.Version]$env:EXISTING_VERSION -ge [System.Version]$version) {
          Write-Output "::error ::Solution version must be incremented"
          Exit 1
        }
      env:
        EXISTING_VERSION: ${{ steps.existing-version.outputs.number }}

    - name: Create pull request for changes
      uses: peter-evans/create-pull-request@v6
      with:
        branch: "v${{ steps.new-version.outputs.number }}"
        commit-message: ${{ github.event.inputs.pr_title }}
        delete-branch: true
        title: ${{ github.event.inputs.pr_title }}
        body:
        add-paths: |
          ${{ env.SOLUTION_PATH }}
